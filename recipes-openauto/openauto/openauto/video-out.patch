Index: git/src/autoapp/Projection/QtVideoOutput.cpp
===================================================================
--- git.orig/src/autoapp/Projection/QtVideoOutput.cpp
+++ git/src/autoapp/Projection/QtVideoOutput.cpp
@@ -16,6 +16,9 @@
 *  along with openauto. If not, see <http://www.gnu.org/licenses/>.
 */
 
+#include <stdio.h>
+#include <time.h>
+
 #include <QApplication>
 #include <f1x/openauto/autoapp/Projection/QtVideoOutput.hpp>
 #include <f1x/openauto/Common/Log.hpp>
@@ -29,6 +32,9 @@ namespace autoapp
 namespace projection
 {
 
+static FILE* outf = 0;
+static bool dump=false;
+  
 QtVideoOutput::QtVideoOutput(configuration::IConfiguration::Pointer configuration)
     : VideoOutput(std::move(configuration))
 {
@@ -64,19 +70,50 @@ void QtVideoOutput::stop()
 
 void QtVideoOutput::write(uint64_t, const aasdk::common::DataConstBuffer& buffer)
 {
+  if (dump) fwrite(buffer.cdata, buffer.size, 1, outf);
+
     videoBuffer_.write(reinterpret_cast<const char*>(buffer.cdata), buffer.size);
 }
 
 void QtVideoOutput::onStartPlayback()
 {
+    OPENAUTO_LOG(debug) << "QtVideoOutput::onStartPlayback" ;
+
+    if (dump) {
+      char fnam[1024];
+      struct timespec tp;
+      
+      if (outf) {
+	fclose(outf);
+      }
+      
+      clock_gettime(CLOCK_REALTIME, &tp);
+      sprintf(fnam, "vid-%ld.mp4", tp.tv_sec );
+      outf = fopen(fnam, "w");
+    }
+
+    OPENAUTO_LOG(debug) << "Player  start ----------------------------------------------------- " ;
+    OPENAUTO_LOG(debug) << "Player  start ----------------------------------------------------- " ;
+    OPENAUTO_LOG(debug) << "Player  start ----------------------------------------------------- " ;
+    OPENAUTO_LOG(debug) << "Player  start ----------------------------------------------------- " ;
+    OPENAUTO_LOG(debug) << "Player  start ----------------------------------------------------- " ;
+    OPENAUTO_LOG(debug) << "Player  start ----------------------------------------------------- " ;
+
     videoWidget_->setAspectRatioMode(Qt::IgnoreAspectRatio);
     videoWidget_->setFocus();
     //videoWidget_->setWindowFlags(Qt::WindowStaysOnTopHint);
     videoWidget_->setFullScreen(true);
+    videoWidget_->setMinimumWidth(800);
+    videoWidget_->setMinimumHeight(480);    
     videoWidget_->show();
 
     mediaPlayer_->setVideoOutput(videoWidget_.get());
-    mediaPlayer_->setMedia(QMediaContent(), &videoBuffer_);
+
+    mediaPlayer_->setMedia(QUrl("gst-pipeline: appsrc blocksize=4294967295 ! h264parse ! v4l2h264dec ! "
+				" imxvideoconvert_g2d ! queue ! autovideosink "
+				" window-width=800 window-height=480 name=\"qtvideosink\""),
+			   &videoBuffer_);
+
     mediaPlayer_->play();
     OPENAUTO_LOG(debug) << "Player error state -> " << mediaPlayer_->errorString().toStdString();
 }
